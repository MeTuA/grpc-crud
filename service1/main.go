package main

import (
	"context"
	"fmt"
	"google.golang.org/grpc"
	"log"
	"net"
	"os"
	"os/signal"
	dProto "service1/proto"
	"time"
)

//
type AutoGenerated struct {
	Meta struct {
		Pagination struct {
			Total int `json:"total"`
			Pages int `json:"pages"`
			Page  int `json:"page"`
			Limit int `json:"limit"`
			Links struct {
				Previous interface{} `json:"previous"`
				Current  string      `json:"current"`
				Next     string      `json:"next"`
			} `json:"links"`
		} `json:"pagination"`
	} `json:"meta"`
	Data []struct {
		ID     int    `json:"id"`
		UserID int    `json:"user_id"`
		Title  string `json:"title"`
		Body   string `json:"body"`
	} `json:"data"`
}

func main() {

	// connecting to db
	dbConn, err := ConnectToDB()
	if err != nil {
		fmt.Println("failed to connect to db")
		return
	}

	fmt.Println("connected to DB")

	// starting listener
	lis, err := net.Listen("tcp", ":8082")
	if err != nil {
		log.Fatalln("Failed to listen: ", err)
	}

	// setting grpc server and adding service
	s := grpc.NewServer()

	dataLoader := NewDataLoader(dbConn)
	dProto.RegisterDataLoaderServer(s, dataLoader)

	go func(){
		s.Serve(lis)
	}()

	fmt.Println("server started on service1")

	// gracefull shutdown
	stop := make(chan os.Signal)
	go func() {
		signal.Notify(stop, os.Interrupt, os.Kill)
	}()
	<-stop

	_, shutdown := context.WithTimeout(context.Background(), 5*time.Second)
	defer shutdown()

	fmt.Println("service1 shut down")
}