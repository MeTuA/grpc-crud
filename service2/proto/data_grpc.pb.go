// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: proto/data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	DeleteData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	UpdateData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	GetData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	GetAllData(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*ListData, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) DeleteData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.DataService/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.DataService/UpdateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.DataService/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetAllData(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*ListData, error) {
	out := new(ListData)
	err := c.cc.Invoke(ctx, "/proto.DataService/GetAllData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	DeleteData(context.Context, *Data) (*Data, error)
	UpdateData(context.Context, *Data) (*Data, error)
	GetData(context.Context, *Data) (*Data, error)
	GetAllData(context.Context, *EmptyParams) (*ListData, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) DeleteData(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedDataServiceServer) UpdateData(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedDataServiceServer) GetData(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedDataServiceServer) GetAllData(context.Context, *EmptyParams) (*ListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataService/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataService/UpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataService/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataService/GetAllData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetAllData(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteData",
			Handler:    _DataService_DeleteData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _DataService_UpdateData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _DataService_GetData_Handler,
		},
		{
			MethodName: "GetAllData",
			Handler:    _DataService_GetAllData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}

// DataLoaderClient is the client API for DataLoader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataLoaderClient interface {
	LoadData(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error)
}

type dataLoaderClient struct {
	cc grpc.ClientConnInterface
}

func NewDataLoaderClient(cc grpc.ClientConnInterface) DataLoaderClient {
	return &dataLoaderClient{cc}
}

func (c *dataLoaderClient) LoadData(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/proto.DataLoader/LoadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataLoaderServer is the server API for DataLoader service.
// All implementations must embed UnimplementedDataLoaderServer
// for forward compatibility
type DataLoaderServer interface {
	LoadData(context.Context, *EmptyParams) (*EmptyParams, error)
	mustEmbedUnimplementedDataLoaderServer()
}

// UnimplementedDataLoaderServer must be embedded to have forward compatible implementations.
type UnimplementedDataLoaderServer struct {
}

func (UnimplementedDataLoaderServer) LoadData(context.Context, *EmptyParams) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadData not implemented")
}
func (UnimplementedDataLoaderServer) mustEmbedUnimplementedDataLoaderServer() {}

// UnsafeDataLoaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataLoaderServer will
// result in compilation errors.
type UnsafeDataLoaderServer interface {
	mustEmbedUnimplementedDataLoaderServer()
}

func RegisterDataLoaderServer(s grpc.ServiceRegistrar, srv DataLoaderServer) {
	s.RegisterService(&DataLoader_ServiceDesc, srv)
}

func _DataLoader_LoadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLoaderServer).LoadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DataLoader/LoadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLoaderServer).LoadData(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

// DataLoader_ServiceDesc is the grpc.ServiceDesc for DataLoader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataLoader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataLoader",
	HandlerType: (*DataLoaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadData",
			Handler:    _DataLoader_LoadData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}
